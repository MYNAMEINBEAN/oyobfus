from flask import Flask, request, jsonify, render_template_string
import os, base64, uuid
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

app = Flask(__name__)

LICENSES = {}  # In-memory store for simplicity; replace with DB in production

HTML_FORM = """
<!doctype html>
<html>
<head><title>Online Encoder</title></head>
<body>
<h2>Python Encoder</h2>
<form method="post">
<textarea name="code" rows="15" cols="80" placeholder="Paste your Python code here"></textarea><br>
<input type="submit" value="Encode">
</form>
{% if encoded %}
<hr>
<h3>Encoded Loader:</h3>
<textarea rows="20" cols="80">{{encoded}}</textarea>
<br><b>License ID:</b> {{license_id}}
{% endif %}
</body>
</html>
"""

@app.route("/", methods=["GET", "POST"])
def index():
    encoded = None
    license_id = None
    if request.method == "POST":
        code = request.form.get("code", "")
        if code:
            # Generate symmetric key
            key = AESGCM.generate_key(bit_length=256)
            aesgcm = AESGCM(key)
            nonce = os.urandom(12)
            ciphertext = aesgcm.encrypt(nonce, code.encode("utf-8"), None)

            # Store key with license id
            license_id = str(uuid.uuid4())
            LICENSES[license_id] = base64.b64encode(key).decode()

            enc_b64 = base64.b64encode(ciphertext).decode()
            nonce_b64 = base64.b64encode(nonce).decode()

            loader = f"""\
# Autogenerated loader
import base64
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

LICENSE_ID = "{license_id}"
ENC_PAYLOAD = "{enc_b64}"
NONCE_B64 = "{nonce_b64}"
LICENSES = {LICENSES}

key_b64 = LICENSES.get(LICENSE_ID)
if not key_b64:
    raise RuntimeError("Invalid license ID")
key = base64.b64decode(key_b64)
nonce = base64.b64decode(NONCE_B64)
ciphertext = base64.b64decode(ENC_PAYLOAD)

aesgcm = AESGCM(key)
plaintext = aesgcm.decrypt(nonce, ciphertext, None)

exec(plaintext, {{"__name__": "__main__"}})
"""
            encoded = loader
    return render_template_string(HTML_FORM, encoded=encoded, license_id=license_id)


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
