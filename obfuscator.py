# obfuscator.py
# Usage: python obfuscator.py path/to/source.py https://your-license-server/create_license
import os, sys, base64, json, uuid, requests
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

if len(sys.argv) < 3:
    print("Usage: python obfuscator.py <source.py> <license-server-create-url>")
    sys.exit(1)

src_path = sys.argv[1]
create_url = sys.argv[2].rstrip("/")

with open(src_path, "rb") as f:
    plaintext = f.read()

# Generate a random symmetric key (256-bit)
key = AESGCM.generate_key(bit_length=256)
aesgcm = AESGCM(key)
nonce = os.urandom(12)

ciphertext = aesgcm.encrypt(nonce, plaintext, None)  # ciphertext includes the auth tag

# Create a license on license server, storing base64(key)
license_id = str(uuid.uuid4())
payload = {"license_id": license_id, "key_b64": base64.b64encode(key).decode("ascii")}
resp = requests.post(create_url, json=payload)
if resp.status_code != 200:
    print("Failed to create license on server:", resp.text)
    sys.exit(1)

# Build the loader Python file (the obfuscated artifact the user will run)
# The loader contains only:
# - encrypted blob (base64)
# - nonce (base64)
# - license_id
# - bootstrapping code that calls unlock_lib to get the symmetric key, decrypts and execs
enc_b64 = base64.b64encode(ciphertext).decode("ascii")
nonce_b64 = base64.b64encode(nonce).decode("ascii")

loader_template = f'''
# Autogenerated loader - do not modify
import base64
import sys

LICENSE_ID = "{license_id}"
ENC_PAYLOAD = "{enc_b64}"
NONCE_B64 = "{nonce_b64}"

# try to import unlock library (the runtime client)
try:
    from unlock_lib import get_symkey_for_license
except Exception as e:
    raise RuntimeError("missing unlock_lib: install your package that communicates with license server") from e

# Get symmetric key bytes (base64) from unlock_lib
key_b64 = get_symkey_for_license(LICENSE_ID)
if not key_b64:
    raise RuntimeError("unable to retrieve symkey for license")

key = base64.b64decode(key_b64)
nonce = base64.b64decode(NONCE_B64)
ciphertext = base64.b64decode(ENC_PAYLOAD)

# AESGCM decrypt
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
aesgcm = AESGCM(key)
plaintext = aesgcm.decrypt(nonce, ciphertext, None)

# Execute the original module source in __main__
# note: this will run the code as a script
exec(plaintext, {{'__name__': '__main__'}})
'''

out_path = os.path.splitext(os.path.basename(src_path))[0] + "_obf.py"
with open(out_path, "w", encoding="utf-8") as f:
    f.write(loader_template)

print("Obfuscated loader written:", out_path)
print("License id:", license_id)
